package main

func main() {

	//var 通道名 chan 数据类型
	var a chan int
	a = make(chan int) //通道定义好之后需要初始化 开辟内存并返回一个可以使用的通道对象。
	/*
	 为什么需要 make？
	 Go 语言中，像通道（chan）、切片（slice）、映射（map）这类引用类型在声明后需要初始化
	 因为它们底层需要分配内存结构，make 是内建函数，用来做这个事。
	*/
	/*
		值类型和引用类型的区别⭐⭐⭐
		在 Go 中，基础类型（如 int, float64, bool, string，以及结构体）是 值类型。
		声明的时候 Go 会为它们分配内存，并赋予默认值（int 是 0，bool 是 false，string 是空字符串 ""）。
		所以你不需要额外调用 make 或 new 来初始化 int，可以直接使用。

		通道（chan）、切片（slice）、映射（map）是 引用类型。
		声明后默认是 nil，不能直接使用，否则运行时会 panic。
		make 会在内存中创建这些结构所需的底层数据结构，并返回引用。

	*/

	/*
		| 类型       | 是否默认可用 | 默认值 | 是否需要 `make` 初始化 |
		|------------|--------------|--------|--------------------------|
		| `int`      | ✅ 是         | `0`    | ❌ 不需要                |
		| `chan int` | ❌ 否         | `nil`  | ✅ 需要                  |
		| `[]int`    | ❌ 否         | `nil`  | ✅ 需要                  |
		| `map`      | ❌ 否         | `nil`  | ✅ 需要                  |
	*/
	a <- 1 //放入
	//data := <- a //取出

}
